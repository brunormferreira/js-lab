// In javascript we can access with:

// dot notation - foo.bar
// square brackets - foo[someVar] or foo["string"]

// But only second case allows to access properties dynamically: 

let foo = { 
  pName1: 1, 
  pName2: [1, {foo: 'bar' }, 3]
}

let name = "pName"
let num  = 1;

foo[name + num]; // 1

let a = 2;
let b = 1;
let c = "foo";

foo[name + a]; // [1, {â€¦}, 3]
foo[name + a][b]; // {foo: "bar"}
foo[name + a][b][c]; // bar

// ...

// Following is an ES6 example of how you can access the property of an object using a property name that has been dynamically generated by concatenating two strings.

let suffix = " name";

let person = {
  ["first" + suffix]: "Bruno",
  ["last" + suffix]: "Ramires"
};

console.log(person["first name"]);      // "Bruno"
console.log(person["last name"]);       // "Ramires"

// ...


// Object destructuring

// We could also consider object destructuring as a means to access a property in an object, but as follows:

let foo = {
  bar: 'Hello World',
  baz: 'How are you doing?',
  last: 'Quite alright'
};

let prop = 'last';
let { bar, baz, [prop]: customName } = foo;

// bar = 'Hello World'
// baz = 'How are you doing?'
// customName = 'Quite alright'