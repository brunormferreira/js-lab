const birds = {
  owl: '游불',
  eagle: '游분',
  duck: '游붅'
};

const entries = Object.entries(birds);
console.log(entries);

// [['owl', '游불'], ['eagle', '游분'], ['duck', '游붅']]

/* ----------------------------------------------------------------------------- */

// using `for...of` loop
for (const [key, value] of Object.entries(birds)) {
  console.log(`${key}: ${value}`);
}

// owl: 游불
// eagle: 游분
// duck: 游붅

/* ----------------------------------------------------------------------------- */

// using array destructuring
Object.entries(birds).forEach(([key, value]) => console.log(`${key}: ${value}`));

// owl: 游불
// eagle: 游분
// duck: 

/* ----------------------------------------------------------------------------- */

// Converting an Object to a Map 
const map = new Map(Object.entries(birds));

console.log(map.size); // 3
console.log(map.has('owl')); // true
console.log(map.get('duck')); // 游붅

/* ----------------------------------------------------------------------------- */

const foods = {
  cake: '游꼻',
  pizza: '游꼣',
  candy: '游꼷',
  icecream: '游꼳'
};

const values = Object.values(foods);
console.log(values);

// ['游꼻', '游꼣', '游꼷', '游꼳']

/* ----------------------------------------------------------------------------- */

/* Both Object.values() and Object.entries() do not follow the prototype chain and 
only iterate through the properties that are directly added to the given object. 
They also ignore all non-enumerable properties as well: */

Object.defineProperty(foods, 'sushi', {
  value: '游꼮',
  writable: true,
  configurable: true,
  enumerable: false
});

console.log(Object.values(foods));

// ['游꼻', '游꼣', '游꼷', '游꼳']

/* ----------------------------------------------------------------------------- */

// Converting an Object to a Set
const set = new Set(Object.values(foods));

console.log(set.size); // 4
console.log(set.has('游꼳')); // true

/* ----------------------------------------------------------------------------- */

const entries = new Map([
  ['foo', 'bar'],
  ['baz', 42]
]);

const obj = Object.fromEntries(entries);

console.log(obj);
// expected output: Object { foo: "bar", baz: 42 }